{"version":3,"sources":["sidebar/Aside.tsx","shared/AppContext.tsx","taskboard/TaskFilterSelect.tsx","taskboard/Taskbar.tsx","taskboard/TaskboardTypes.ts","taskboard/TaskboardItemFormModal.tsx","shared/BaseTooltip.tsx","shared/SharedUtils.ts","taskboard/TaskboardItemCard.tsx","taskboard/TaskboardCol.tsx","taskboard/Taskboard.tsx","shared/SharedHooks.ts","app/App.tsx","index.tsx"],"names":["Aside","collapsed","breakPoint","style","padding","textTransform","fontWeight","fontSize","letterSpacing","overflow","whiteSpace","textAlign","Html5Outlined","className","iconShape","icon","SearchOutlined","suffix","SketchOutlined","title","AmazonCircleFilled","prefix","HeartOutlined","UnorderedListOutlined","GithubOutlined","initialContext","isLoading","setIsLoading","Error","isLoggedIn","setIsLoggedIn","allJobTitles","setAllJobTitles","filteredJobTitles","setFilteredJobTitles","AppContext","React","createContext","Option","Select","TaskFilterSelect","useState","children","setChildren","appContext","useContext","useEffect","childs","forEach","val","push","value","id","htmlFor","mode","allowClear","width","placeholder","onSelect","selectedArr","onDeselect","splice","indexOf","disabled","TaskbarMenu","styled","div","Taskbar","TaskboardItemStatus","type","onClick","TaskboardItemFormModal","visible","initialValues","onCancel","onOk","Form","useForm","form","profileImg","setProfileImg","inputRef","useRef","current","focus","resetFields","destroyOnClose","forceRender","submit","autoComplete","layout","onFinish","values","a","status","APPLICANTS","formData","FormData","append","name","description","axios","post","applicantCreated","data","Item","label","rules","required","message","max","ref","autoFocus","TextArea","rows","valuePropName","getValueFromEvent","e","console","log","Array","isArray","fileList","extra","listType","beforeUpload","file","UploadOutlined","BaseTooltip","props","mouseEnterDelay","colors","geekblue","StyledCard","Card","$isDragging","TaskboardItemCardTitle","Typography","Title","TaskboardItemCard","item","isDragging","onEdit","onDelete","size","overlay","level","ellipsis","src","UserOutlined","Paragraph","TaskboardColRoot","DroppableRoot","isDraggingOver","getStyle","snapshot","isDropAnimating","dropAnimation","moveTo","curve","duration","translate","x","y","transform","transition","TaskboardCol","items","onClickAdd","CheckOutlined","length","droppableId","provided","innerRef","droppableProps","map","index","draggableId","_id","draggableProps","dragHandleProps","TaskboardRoot","TaskboardContent","defaultItems","UNDER_REVIEW","SELECTED","REJECTED","Taskboard","key","initialValue","bInitialOnly","getValueFromStorage","useCallback","goTrySync","JSON","parse","localStorage","getItem","state","setState","handleStorageChange","window","addEventListener","removeEventListener","setItem","stringify","useSyncedState","itemsByStatus","setItemsByStatus","goTry","get","res","error","produce","draft","jobTitles","users","applicant","Object","isModalVisible","setIsModalVisible","itemToEdit","setItemToEdit","openTaskItemModal","handleDelete","itemToDelete","filter","useMemo","onDragEnd","source","destination","removed","then","result","undefined","draftItem","flatMap","find","StyledLayout","Layout","StyledHeader","Header","StyledContent","Content","App","userValues","Provider","height","spinning","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.51cfec76.chunk.js","sourcesContent":["import {\r\n  ProSidebar,\r\n  Menu,\r\n  MenuItem,\r\n  SubMenu,\r\n  SidebarHeader,\r\n  SidebarFooter,\r\n  SidebarContent,\r\n} from 'react-pro-sidebar';\r\nimport {\r\n  SketchOutlined,\r\n  GithubOutlined,\r\n  Html5Outlined,\r\n  UnorderedListOutlined,\r\n  AmazonCircleFilled,\r\n  HeartOutlined,\r\n  SearchOutlined,\r\n} from '@ant-design/icons';\r\n\r\nconst Aside = () => {\r\n  return (\r\n    <ProSidebar collapsed={true} breakPoint=\"md\">\r\n      <SidebarHeader>\r\n        <div\r\n          style={{\r\n            padding: '24px 0px',\r\n            textTransform: 'uppercase',\r\n            fontWeight: 'bold',\r\n            fontSize: 20,\r\n            letterSpacing: '1px',\r\n            overflow: 'hidden',\r\n            whiteSpace: 'nowrap',\r\n            textAlign: 'center',\r\n          }}\r\n        >\r\n          <Html5Outlined />\r\n        </div>\r\n      </SidebarHeader>\r\n      <div className=\"divider\"></div>\r\n      <SidebarContent>\r\n        <Menu iconShape=\"circle\">\r\n          <MenuItem\r\n            icon={<SearchOutlined />}\r\n            suffix={<span className=\"badge red\">New</span>}\r\n          >\r\n            {'Dashboard'}\r\n          </MenuItem>\r\n          <MenuItem icon={<SketchOutlined />}>Components</MenuItem>\r\n        </Menu>\r\n        <div className=\"divider\"></div>\r\n        <Menu iconShape=\"circle\">\r\n          <SubMenu\r\n            suffix={<span className=\"badge yellow\">3</span>}\r\n            title={'With Suffix'}\r\n            icon={<AmazonCircleFilled />}\r\n          >\r\n            <MenuItem>SubMenu 1</MenuItem>\r\n            <MenuItem>SubMenu 2</MenuItem>\r\n            <MenuItem>SubMenu 3</MenuItem>\r\n          </SubMenu>\r\n          <SubMenu\r\n            prefix={'<span className=\"badge gray\">3</span>'}\r\n            title={'With Prefix'}\r\n            icon={<HeartOutlined />}\r\n          >\r\n            <MenuItem>SubMenu 1</MenuItem>\r\n            <MenuItem>SubMenu 2</MenuItem>\r\n            <MenuItem>SubMenu 3</MenuItem>\r\n          </SubMenu>\r\n          <SubMenu title={'Multi Level'} icon={<UnorderedListOutlined />}>\r\n            <MenuItem>SubMenu 1 </MenuItem>\r\n            <MenuItem>SubMenu 2 </MenuItem>\r\n            <SubMenu title={`$SubMenu  3`}>\r\n              <MenuItem>SubMenu 3.1 </MenuItem>\r\n              <MenuItem>SubMenu 3.2 </MenuItem>\r\n              <SubMenu title={`$SubMenu  3.3`}>\r\n                <MenuItem>SubMenu 3.3.1 </MenuItem>\r\n                <MenuItem>SubMenu 3.3.2 </MenuItem>\r\n                <MenuItem>SubMenu SubMenu SubMenu 3.3.3 </MenuItem>\r\n              </SubMenu>\r\n            </SubMenu>\r\n          </SubMenu>\r\n        </Menu>\r\n      </SidebarContent>\r\n\r\n      <div className=\"divider\"></div>\r\n      <SidebarFooter style={{ textAlign: 'center' }}>\r\n        <div className=\"sidebar-btn-wrapper\">\r\n          <span className=\"sidebar-btn\">\r\n            <GithubOutlined />\r\n            <span>{'Account'}</span>\r\n          </span>\r\n        </div>\r\n      </SidebarFooter>\r\n    </ProSidebar>\r\n  );\r\n};\r\n\r\nexport default Aside;\r\n","import React, { Dispatch, SetStateAction } from 'react';\r\n\r\ntype Context = {\r\n  isLoading: boolean;\r\n  setIsLoading: Dispatch<SetStateAction<boolean>>;\r\n  isLoggedIn: boolean;\r\n  setIsLoggedIn: Dispatch<SetStateAction<boolean>>;\r\n  allJobTitles: string[];\r\n  setAllJobTitles: Dispatch<SetStateAction<string[]>>;\r\n  filteredJobTitles: string[];\r\n  setFilteredJobTitles: Dispatch<SetStateAction<string[]>>;\r\n};\r\n\r\nconst initialContext: Context = {\r\n  isLoading: false,\r\n  setIsLoading: (): void => {\r\n    throw new Error('setIsLoggedIn function must be overridden');\r\n  },\r\n  isLoggedIn: false,\r\n  setIsLoggedIn: (): void => {\r\n    throw new Error('setIsLoggedIn function must be overridden');\r\n  },\r\n  allJobTitles: [],\r\n  setAllJobTitles: (): void => {\r\n    throw new Error('setAllJobTitles function must be overridden');\r\n  },\r\n  filteredJobTitles: [],\r\n  setFilteredJobTitles: (): void => {\r\n    throw new Error('setAllJobTitles function must be overridden');\r\n  },\r\n};\r\n\r\nconst AppContext = React.createContext(initialContext);\r\n\r\nexport default AppContext;\r\n","import { Select } from 'antd';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport AppContext from '../shared/AppContext';\r\n\r\nconst { Option } = Select;\r\n\r\nexport function TaskFilterSelect() {\r\n  const [children, setChildren] = useState([] as React.ReactNode[]);\r\n  let appContext = useContext(AppContext);\r\n\r\n  useEffect(() => {\r\n    let childs: React.ReactNode[] = [];\r\n    appContext.allJobTitles.forEach((val) => {\r\n      childs.push(\r\n        <Option value={val} key={val}>\r\n          {val}\r\n        </Option>\r\n      );\r\n    });\r\n    setChildren(childs);\r\n  }, [appContext.allJobTitles]);\r\n\r\n  function handleSelect(value: string) {\r\n    let selectedArr: string[] = [...appContext.filteredJobTitles, value];\r\n    appContext.setFilteredJobTitles(selectedArr);\r\n  }\r\n\r\n  function handleDeselect(value: string) {\r\n    let selectedArr: string[] = [...appContext.filteredJobTitles];\r\n    selectedArr.splice(selectedArr.indexOf(value), 1);\r\n    appContext.setFilteredJobTitles(selectedArr);\r\n  }\r\n\r\n  return (\r\n    <span id=\"filter-container\">\r\n      <label htmlFor=\"jobTitleFilter\">Show Only : </label>\r\n      <Select\r\n        id=\"jobTitleFilter\"\r\n        mode=\"multiple\"\r\n        allowClear\r\n        style={{ width: '50%' }}\r\n        placeholder=\"Please select\"\r\n        onSelect={handleSelect}\r\n        onDeselect={handleDeselect}\r\n        disabled={!appContext.isLoggedIn}\r\n      >\r\n        {children}\r\n      </Select>\r\n    </span>\r\n  );\r\n}\r\n","import { Button } from 'antd';\r\nimport { useContext } from 'react';\r\nimport styled from 'styled-components';\r\nimport AppContext from '../shared/AppContext';\r\nimport { TaskFilterSelect } from './TaskFilterSelect';\r\n\r\nconst TaskbarMenu = styled.div`\r\n  border-top: 1px solid #e9eef2;\r\n  border-bottom: 1px solid #e9eef2;\r\n  padding: 5px 0px;\r\n  width: 100%;\r\n  margin: auto;\r\n`;\r\n\r\nfunction Taskbar() {\r\n  let appContext = useContext(AppContext);\r\n\r\n  const onLoginClick = () => {\r\n    appContext.setIsLoggedIn(!appContext.isLoggedIn);\r\n  };\r\n  return (\r\n    <TaskbarMenu>\r\n      <TaskFilterSelect></TaskFilterSelect>\r\n      <Button id=\"loginBtn\" type=\"primary\" onClick={onLoginClick}>\r\n        {appContext.isLoggedIn ? 'Logout' : 'Login'}\r\n      </Button>\r\n    </TaskbarMenu>\r\n  );\r\n}\r\n\r\nexport default Taskbar;\r\n","export interface TaskboardItem {\n  _id: string;\n  name: string;\n  description: string;\n  title: string;\n  status: string;\n  profileImg?: string;\n}\n\nexport enum TaskboardItemStatus {\n  APPLICANTS = 'Applicants',\n  UNDER_REVIEW = 'Under Review',\n  SELECTED = 'Selected',\n  REJECTED = 'Rejected',\n}\n","import React, { useContext, useEffect, useRef, useState } from 'react';\nimport { Modal, Form, ModalProps, Input, Upload, Button } from 'antd';\nimport { TaskboardItem, TaskboardItemStatus } from './TaskboardTypes';\nimport axios from 'axios';\nimport { UploadOutlined } from '@ant-design/icons';\nimport AppContext from '../shared/AppContext';\n\nexport type TaskboardItemFormValues = Pick<\n\tTaskboardItem,\n\t'title' | 'name' | 'description' | 'status' | 'profileImg'\n>;\n\ntype TaskboardItemFormModalProps = Pick<ModalProps, 'visible'> & {\n\tinitialValues: TaskboardItemFormValues;\n\tonCancel: VoidFunction;\n\tonOk: (values: TaskboardItem) => void;\n};\n\nfunction TaskboardItemFormModal({\n\tvisible,\n\tinitialValues,\n\tonCancel,\n\tonOk,\n}: TaskboardItemFormModalProps) {\n\tconst [form] = Form.useForm<TaskboardItemFormValues>();\n\n\tconst [profileImg, setProfileImg] = useState<null | Blob>(null);\n\n\tconst inputRef = useRef<Input>(null);\n\n  let appContext = useContext(AppContext);\n\n\tuseEffect(() => {\n\t\tif (visible) {\n\t\t\t// Focus on the first input when the modal is opened\n\t\t\tinputRef.current?.focus();\n\t\t\tform.resetFields();\n\t\t}\n\t}, [form, visible]);\n\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tconst normFile = (e: any) => {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.log('Upload event:', e);\n\t\tif (Array.isArray(e)) {\n\t\t\treturn e;\n\t\t}\n\t\treturn e && e.fileList;\n\t};\n\n\treturn (\n\t\t<Modal\n\t\t\ttitle=\"Add Item\"\n\t\t\tvisible={visible}\n\t\t\tdestroyOnClose\n\t\t\t// To make dynamically changing initialValues work with Form\n\t\t\tforceRender\n\t\t\tonCancel={onCancel}\n\t\t\tonOk={() => form.submit()}\n\t\t>\n\t\t\t<Form\n\t\t\t\tautoComplete=\"off\"\n\t\t\t\tform={form}\n\t\t\t\tlayout=\"vertical\"\n\t\t\t\tinitialValues={initialValues}\n\t\t\t\tonFinish={async (values) => {\n\t\t\t\t\tappContext.setIsLoading(true);\n\t\t\t\t\tvalues.status = TaskboardItemStatus.APPLICANTS;\n\t\t\t\t\tlet formData = new FormData();\n\n\t\t\t\t\tformData.append('name', values.name);\n\t\t\t\t\tformData.append('title', values.title);\n\t\t\t\t\tformData.append('description', values.description);\n\t\t\t\t\tformData.append('status', values.status);\n\n\t\t\t\t\tif (profileImg) {\n\t\t\t\t\t\tformData.append('profileImg', profileImg);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet applicantCreated = await axios.post(\n\t\t\t\t\t\t'http://ayrataskdemo.eu-west-1.elasticbeanstalk.com/api/user-profile',\n\t\t\t\t\t\tformData\n\t\t\t\t\t);\n\t\t\t\t\tvalues = applicantCreated.data\n\t\t\t\t\t\t.applicantCreated as TaskboardItem;\n\t\t\t\t\tonOk(values as TaskboardItem);\n\t\t\t\t\tform.resetFields();\n\t\t\t\t\tonCancel();\n\t\t\t\t\tappContext.setIsLoading(false);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Form.Item\n\t\t\t\t\tname=\"title\"\n\t\t\t\t\tlabel=\"Job Title\"\n\t\t\t\t\trules={[\n\t\t\t\t\t\t{ required: true, message: \"'Job Title' is required\" },\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmax: 100,\n\t\t\t\t\t\t\tmessage:\n\t\t\t\t\t\t\t\t\"'Job Title' can not be longer than 100 characters\",\n\t\t\t\t\t\t},\n\t\t\t\t\t]}\n\t\t\t\t>\n\t\t\t\t\t<Input ref={inputRef} autoFocus />\n\t\t\t\t</Form.Item>\n\t\t\t\t<Form.Item\n\t\t\t\t\tname=\"name\"\n\t\t\t\t\tlabel=\"Name\"\n\t\t\t\t\trules={[\n\t\t\t\t\t\t{ required: true, message: \"'Name' is required\" },\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmax: 100,\n\t\t\t\t\t\t\tmessage:\n\t\t\t\t\t\t\t\t\"'Name' can not be longer than 100 characters\",\n\t\t\t\t\t\t},\n\t\t\t\t\t]}\n\t\t\t\t>\n\t\t\t\t\t<Input />\n\t\t\t\t</Form.Item>\n\t\t\t\t<Form.Item\n\t\t\t\t\tname=\"description\"\n\t\t\t\t\tlabel=\"Description\"\n\t\t\t\t\trules={[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\tmessage: \"'Description' is required\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmax: 400,\n\t\t\t\t\t\t\tmessage:\n\t\t\t\t\t\t\t\t\"'Description' can not be longer than 400 characters\",\n\t\t\t\t\t\t},\n\t\t\t\t\t]}\n\t\t\t\t>\n\t\t\t\t\t<Input.TextArea rows={4} />\n\t\t\t\t</Form.Item>\n\t\t\t\t<Form.Item\n\t\t\t\t\tname=\"upload\"\n\t\t\t\t\tlabel=\"Upload\"\n\t\t\t\t\tvaluePropName=\"fileList\"\n\t\t\t\t\tgetValueFromEvent={normFile}\n\t\t\t\t\textra=\"Upload you profile pic\"\n\t\t\t\t>\n\t\t\t\t\t<Upload\n\t\t\t\t\t\tname=\"logo\"\n\t\t\t\t\t\tlistType=\"picture\"\n\t\t\t\t\t\tbeforeUpload={(file) => {\n\t\t\t\t\t\t\tsetProfileImg(file);\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Button icon={<UploadOutlined />}>\n\t\t\t\t\t\t\tClick to upload\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Upload>\n\t\t\t\t</Form.Item>\n\t\t\t</Form>\n\t\t</Modal>\n\t);\n}\n\nexport default TaskboardItemFormModal;\n","import { Tooltip, TooltipProps } from 'antd';\n\ntype BaseTooltipProps = TooltipProps;\n\nfunction BaseTooltip(props: BaseTooltipProps) {\n  return <Tooltip mouseEnterDelay={1.5} {...props} />;\n}\n\nexport default BaseTooltip;\n","import { geekblue } from '@ant-design/colors';\n\nexport const colors = {\n  primary: geekblue,\n  columnDragOver: '#E9EAED',\n  columnDragStart: '#B4BBC4',\n  columnCountBg: '#B4BBC4',\n  columnTitleColor: '#999',\n};\n","import { Card, Typography, Image } from 'antd';\nimport { TaskboardItem, TaskboardItemStatus } from './TaskboardTypes';\nimport { UserOutlined } from '@ant-design/icons';\nimport styled from 'styled-components';\nimport BaseTooltip from '../shared/BaseTooltip';\nimport { colors } from '../shared/SharedUtils';\nimport Avatar from 'antd/lib/avatar/avatar';\n\ninterface StyledCardProps {\n\t$isDragging: boolean;\n}\n\nconst StyledCard = styled(Card)<StyledCardProps>`\n\tmargin: 0.5rem;\n\tbackground-color: ${({ $isDragging }) =>\n\t\t$isDragging ? '#fafafa' : '#fff'};\n\tborder-radius: 5px;\n\ttransform: rotate(${({ $isDragging }) => ($isDragging ? '10' : '0')}deg);\n\n\t.ant-card-body {\n\t\tdisplay: flex;\n\t\tflex-direction: row;\n\t\tflex: inherit;\n\t}\n\t.avatar-container {\n\t\twidth: 90px;\n\t}\n`;\n\nconst TaskboardItemCardTitle = styled(Typography.Title)`\n\twhite-space: pre-wrap;\n\t// To make ellipsis of the title visible.\n\t// Without this margin, it can be go behind the \"extra\" component.\n\t// So, we give it a little space.\n\tmargin-right: 0.25rem;\n\t&.ant-typography {\n\t\tcolor: ${colors.columnTitleColor};\n\t\tmargin-bottom: 0px;\n\t}\n`;\n\nexport interface TaskboardItemCardProps {\n\titem: TaskboardItem;\n\tisDragging: boolean;\n\tstatus: TaskboardItemStatus;\n\tonEdit: (itemToEdit: TaskboardItem) => void;\n\tonDelete: (args: {\n\t\tstatus: TaskboardItemStatus;\n\t\titemToDelete: TaskboardItem;\n\t}) => void;\n}\n\nfunction TaskboardItemCard({\n\titem,\n\tstatus,\n\tisDragging,\n\tonEdit,\n\tonDelete,\n}: TaskboardItemCardProps) {\n\treturn (\n\t\t<StyledCard\n\t\t\t$isDragging={isDragging}\n\t\t\tsize=\"small\"\n\t\t\ttitle={\n\t\t\t\t<BaseTooltip overlay={item.title}>\n\t\t\t\t\t{/* styled(Typography.Title) throws an error in console about \n          forwarding ref in function components.\n          Because Typography.Title doesn't accept a ref.\n          So, we just placed a span tag here. */}\n\t\t\t\t\t<span>\n\t\t\t\t\t\t<TaskboardItemCardTitle\n\t\t\t\t\t\t\tlevel={5}\n\t\t\t\t\t\t\tellipsis={{ rows: 2 }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{item.title}\n\t\t\t\t\t\t</TaskboardItemCardTitle>\n\t\t\t\t\t</span>\n\t\t\t\t</BaseTooltip>\n\t\t\t}\n\t\t\t// extra={\n\t\t\t// \t<Dropdown\n\t\t\t// \t\toverlay={\n\t\t\t// \t\t\t<Menu>\n\t\t\t// \t\t\t\t<Menu.Item\n\t\t\t// \t\t\t\t\ticon={<EditOutlined />}\n\t\t\t// \t\t\t\t\tonClick={() => onEdit(item)}\n\t\t\t// \t\t\t\t>\n\t\t\t// \t\t\t\t\tEdit\n\t\t\t// \t\t\t\t</Menu.Item>\n\t\t\t// \t\t\t\t<DeleteMenuItem\n\t\t\t// \t\t\t\t\ticon={<DeleteOutlined />}\n\t\t\t// \t\t\t\t\tonClick={() =>\n\t\t\t// \t\t\t\t\t\tModal.confirm({\n\t\t\t// \t\t\t\t\t\t\ttitle: 'Delete?',\n\t\t\t// \t\t\t\t\t\t\tcontent: `Are you sure to delete \"${item.title}\"?`,\n\t\t\t// \t\t\t\t\t\t\tonOk: () =>\n\t\t\t// \t\t\t\t\t\t\t\tonDelete({\n\t\t\t// \t\t\t\t\t\t\t\t\tstatus,\n\t\t\t// \t\t\t\t\t\t\t\t\titemToDelete: item,\n\t\t\t// \t\t\t\t\t\t\t\t}),\n\t\t\t// \t\t\t\t\t\t})\n\t\t\t// \t\t\t\t\t}\n\t\t\t// \t\t\t\t>\n\t\t\t// \t\t\t\t\tDelete\n\t\t\t// \t\t\t\t</DeleteMenuItem>\n\t\t\t// \t\t\t</Menu>\n\t\t\t// \t\t}\n\t\t\t// \t\ttrigger={['click']}\n\t\t\t// \t>\n\t\t\t// \t\t<Button size=\"small\" icon={<MoreOutlined />} />\n\t\t\t// \t</Dropdown>\n\t\t\t// }\n\t\t>\n\t\t\t<div className=\"avatar-container\">\n\t\t\t\t<Avatar\n\t\t\t\t\tsrc={item.profileImg ? <Image src={item.profileImg} /> : ''}\n\t\t\t\t\ticon={item.profileImg ? '' : <UserOutlined />}\n\t\t\t\t\tsize={60}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div className=\"card-content-container\">\n\t\t\t\t<Typography.Title level={5}>{item.name}</Typography.Title>\n\t\t\t\t<Typography.Paragraph type=\"secondary\" ellipsis={{ rows: 2 }}>\n\t\t\t\t\t{item.description}\n\t\t\t\t</Typography.Paragraph>\n\t\t\t</div>\n\t\t</StyledCard>\n\t);\n}\n\nexport default TaskboardItemCard;\n","import {\n  Droppable,\n  Draggable,\n  DraggableStateSnapshot,\n  DraggingStyle,\n  DropAnimation,\n} from 'react-beautiful-dnd';\nimport styled from 'styled-components';\nimport { Button, Card } from 'antd';\nimport { TaskboardItem, TaskboardItemStatus } from './TaskboardTypes';\nimport TaskboardItemCard, { TaskboardItemCardProps } from './TaskboardItemCard';\nimport { colors } from '../shared/SharedUtils';\nimport { CheckOutlined } from '@ant-design/icons';\nimport { useContext } from 'react';\nimport AppContext from '../shared/AppContext';\n\nconst TaskboardColRoot = styled(Card)`\n  user-select: none;\n  flex: 1;\n  margin: 0.5rem;\n  display: flex;\n  flex-direction: column;\n  // To force each flex item to have equal width\n  // even if they have long texts with no spaces etc.\n  min-width: 0;\n  > .ant-card-body {\n    overflow: hidden;\n    height: 100%;\n    padding: 0;\n  }\n  > .ant-card-head {\n    background-color: ${colors.columnDragOver};\n  }\n  .ant-card-extra {\n    padding: 0px;\n  }\n  .task-title {\n    color: ${colors.columnTitleColor};\n    font-weight: bold;\n  }\n  .item-count {\n    background-color: ${colors.columnCountBg};\n    padding: 0px 5px;\n    border-radius: 5px;\n    color: #fff;\n  }\n`;\n\ninterface DroppableRootProps {\n  isDraggingOver: boolean;\n}\n\nconst DroppableRoot = styled.div<DroppableRootProps>`\n  height: 100%;\n  overflow-y: auto;\n  background-color: ${({ isDraggingOver }) =>\n    isDraggingOver ? colors.columnDragStart : colors.columnDragOver};\n`;\n\nexport type TaskboardColProps = Pick<\n  TaskboardItemCardProps,\n  'onEdit' | 'onDelete'\n> & {\n  items: TaskboardItem[];\n  status: TaskboardItemStatus;\n  onClickAdd?: VoidFunction;\n};\n\nfunction getStyle(style: DraggingStyle, snapshot: DraggableStateSnapshot) {\n  /*if (!snapshot.isDropAnimating) {\n    return style;\n  }\n  return {\n    ...style,\n    // cannot be 0, but make it super tiny\n    transitionDuration: `0.001s`,\n  };*/\n  if (!snapshot.isDropAnimating) {\n    return style;\n  }\n  const { moveTo, curve, duration } = snapshot.dropAnimation as DropAnimation;\n  // move to the right spot\n  const translate = `translate(${moveTo.x}px, ${moveTo.y}px)`;\n  // add a bit of turn for fun\n  const rotate = 'rotate(-10deg)';\n\n  // patching the existing style\n  return {\n    ...style,\n    transform: `${translate} ${rotate}`,\n    // slowing down the drop because we can\n    transition: `all ${curve} ${duration}s`,\n  };\n}\n\nfunction TaskboardCol({\n  items,\n  status,\n  onClickAdd,\n  onEdit,\n  onDelete,\n}: TaskboardColProps) {\n\n  let appContext = useContext(AppContext);\n\n  return (\n    <TaskboardColRoot\n      title={\n        <span className=\"task-title\">\n          <CheckOutlined style={{ fontWeight: 'bold' }} /> {status}{' '}\n          {items.length ? (\n            <span className=\"item-count\">{items.length}</span>\n          ) : (\n            ''\n          )}\n        </span>\n      }\n      extra={\n        onClickAdd && (\n          <Button type=\"primary\" onClick={onClickAdd} disabled={!appContext.isLoggedIn}>\n            Add Applicant\n          </Button>\n        )\n      }\n    >\n      <Droppable droppableId={status}>\n        {(provided, snapshot) => (\n          <DroppableRoot\n            ref={provided.innerRef}\n            {...provided.droppableProps}\n            isDraggingOver={snapshot.isDraggingOver}\n          >\n            {items.map((item, index) => {\n              return (\n                <Draggable key={item._id} draggableId={item._id} index={index}>\n                  {(provided, snapshot) => (\n                    <div\n                      key={item._id}\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                      style={getStyle(\n                        provided.draggableProps.style as DraggingStyle,\n                        snapshot\n                      )}\n                    >\n                      <TaskboardItemCard\n                        item={item}\n                        status={status}\n                        isDragging={snapshot.isDragging}\n                        onEdit={onEdit}\n                        onDelete={onDelete}\n                      />\n                    </div>\n                  )}\n                </Draggable>\n              );\n            })}\n            {provided.placeholder}\n          </DroppableRoot>\n        )}\n      </Droppable>\n    </TaskboardColRoot>\n  );\n}\n\nexport default TaskboardCol;\n","import { DragDropContext, DragDropContextProps } from 'react-beautiful-dnd';\nimport { useContext, useEffect, useMemo, useState } from 'react';\nimport produce from 'immer';\nimport styled from 'styled-components';\nimport { TaskboardItem, TaskboardItemStatus } from './TaskboardTypes';\nimport TaskboardItemFormModal, {\n  TaskboardItemFormValues,\n} from './TaskboardItemFormModal';\nimport TaskboardCol, { TaskboardColProps } from './TaskboardCol';\nimport { useSyncedState } from '../shared/SharedHooks';\nimport { goTry } from 'go-try';\nimport axios from 'axios';\nimport AppContext from '../shared/AppContext';\n\nconst TaskboardRoot = styled.div`\n  min-height: 0;\n  height: 100%;\n  min-width: 800px;\n  max-width: 1400px;\n  margin: auto;\n`;\n\nconst TaskboardContent = styled.div`\n  height: 100%;\n  padding: 0.5rem;\n  display: flex;\n  justify-content: space-around;\n`;\n\ninterface ApplicantList {\n  users: TaskboardItem[];\n}\n\nconst defaultItems = {\n  [TaskboardItemStatus.APPLICANTS]: [],\n  [TaskboardItemStatus.UNDER_REVIEW]: [],\n  [TaskboardItemStatus.SELECTED]: [],\n  [TaskboardItemStatus.REJECTED]: [],\n};\n\ntype TaskboardData = Record<TaskboardItemStatus, TaskboardItem[]>;\n\nfunction Taskboard() {\n  let appContext = useContext(AppContext);\n  const [itemsByStatus, setItemsByStatus] = useSyncedState<TaskboardData>(\n    'itemsByStatus',\n    defaultItems,\n    true\n  );\n\n  /*const [displayItems, setDisplayItems] = useState(items);\n\n  useEffect(() => {\n    setDisplayItems(\n      items.filter((item) => {\n        return appContext.filteredJobTitles.length > 0\n          ? appContext.filteredJobTitles.indexOf(item.title) > -1\n          : true;\n      })\n    );\n  }, [appContext.filteredJobTitles, items]);*/\n\n  useEffect(() => {\n    (async () => {\n      if (appContext.isLoggedIn) {\n        appContext.setIsLoading(true);\n        let res = await goTry(() =>\n          axios.get<ApplicantList>('http://ayrataskdemo.eu-west-1.elasticbeanstalk.com/api')\n        );\n        if (res.error) {\n          return;\n        }\n        setItemsByStatus((current) =>\n          produce(current, (draft) => {\n            let jobTitles: string[] = [];\n\n            (res.data?.data as ApplicantList | null)?.users?.forEach(\n              (applicant: TaskboardItem) => {\n                draft[applicant.status as TaskboardItemStatus].push(applicant);\n                if (jobTitles.indexOf(applicant.title) === -1) {\n                  jobTitles.push(applicant.title);\n                }\n              }\n            );\n            appContext.setAllJobTitles(jobTitles);\n            appContext.setIsLoading(false);\n          })\n        );\n      } else {\n        setItemsByStatus((current) =>\n          produce(current, (draft) => {\n            Object.values(TaskboardItemStatus).forEach(\n              (x: TaskboardItemStatus) => {\n                draft[x as TaskboardItemStatus] = [];\n              }\n            );\n            appContext.setAllJobTitles([] as string[]);\n            appContext.setIsLoading(false);\n          })\n        );\n      }\n    })();\n  }, [appContext.isLoggedIn, setItemsByStatus]);\n\n  const handleDragEnd: DragDropContextProps['onDragEnd'] = ({\n    source,\n    destination,\n  }) => {\n    setItemsByStatus((current) =>\n      produce(current, (draft) => {\n        // dropped outside the list\n        if (!destination) {\n          return;\n        }\n        const [removed] = draft[\n          source.droppableId as TaskboardItemStatus\n        ].splice(source.index, 1);\n        removed.status = destination.droppableId;\n        draft[destination.droppableId as TaskboardItemStatus].splice(\n          destination.index,\n          0,\n          removed\n        );\n\n        goTry(() =>\n          axios.post('http://ayrataskdemo.eu-west-1.elasticbeanstalk.com/api/update-status', removed)\n        ).then((result) => {\n          if (result.error) {\n            // eslint-disable-next-line no-console\n            console.log('status update failed');\n          } else {\n            // eslint-disable-next-line no-console\n            console.log('status update successfull');\n          }\n        });\n      })\n    );\n  };\n\n  const [isModalVisible, setIsModalVisible] = useState(false);\n\n  const [itemToEdit, setItemToEdit] = useState<TaskboardItem | null>(null);\n\n  const openTaskItemModal = (itemToEdit: TaskboardItem | null) => {\n    setItemToEdit(itemToEdit);\n    setIsModalVisible(true);\n  };\n\n  const closeTaskItemModal = () => {\n    setItemToEdit(null);\n    setIsModalVisible(false);\n  };\n\n  const handleDelete: TaskboardColProps['onDelete'] = ({\n    status,\n    itemToDelete,\n  }) =>\n    setItemsByStatus((current) =>\n      produce(current, (draft) => {\n        draft[status] = draft[status].filter(\n          (item) => item._id !== itemToDelete._id\n        );\n      })\n    );\n\n  const initialValues = useMemo<TaskboardItemFormValues>(\n    () => ({\n      title: itemToEdit?.title ?? '',\n      description: itemToEdit?.description ?? '',\n      name: itemToEdit?.name ?? '',\n      status: itemToEdit?.status ?? '',\n    }),\n    [itemToEdit]\n  );\n\n  return (\n    <>\n      <DragDropContext onDragEnd={handleDragEnd}>\n        <TaskboardRoot>\n          <TaskboardContent>\n            {Object.values(TaskboardItemStatus).map((status) => (\n              <TaskboardCol\n                key={status}\n                status={status}\n                items={itemsByStatus[status].filter((item) => {\n                  return appContext.filteredJobTitles.length > 0\n                    ? appContext.filteredJobTitles.indexOf(item.title) > -1\n                    : true;\n                })}\n                onClickAdd={\n                  status === TaskboardItemStatus.APPLICANTS\n                    ? () => openTaskItemModal(null)\n                    : undefined\n                }\n                onEdit={openTaskItemModal}\n                onDelete={handleDelete}\n              />\n            ))}\n          </TaskboardContent>\n        </TaskboardRoot>\n      </DragDropContext>\n      <TaskboardItemFormModal\n        visible={isModalVisible}\n        onCancel={closeTaskItemModal}\n        onOk={(values) => {\n          setItemsByStatus((current) =>\n            produce(current, (draft) => {\n              if (itemToEdit) {\n                // Editing existing item\n                const draftItem = Object.values(draft)\n                  .flatMap((items) => items)\n                  .find((item) => item._id === itemToEdit._id);\n                if (draftItem) {\n                  draftItem.title = values.title;\n                  draftItem.description = values.description;\n                  draftItem.name = values.name;\n                }\n              } else {\n                // Adding new item as \"to do\"\n                draft[TaskboardItemStatus.APPLICANTS].push({\n                  ...values,\n                  status: TaskboardItemStatus.APPLICANTS,\n                });\n              }\n\n              let jobTitles = [...appContext.allJobTitles];\n\n              if (jobTitles.indexOf(values.title) === -1) {\n                jobTitles.push(values.title);\n                appContext.setAllJobTitles(jobTitles as string[]);\n              }\n            })\n          );\n        }}\n        initialValues={initialValues}\n      />\n    </>\n  );\n}\n\nexport default Taskboard;\n","import { goTrySync } from 'go-try';\nimport React, { useCallback, useEffect, useState } from 'react';\n\n// Syncs state to localStorage and vice versa\nexport function useSyncedState<T>(\n  key: string,\n  initialValue: T,\n  bInitialOnly: boolean\n): [T, React.Dispatch<React.SetStateAction<T>>] {\n  const getValueFromStorage = useCallback(() => {\n    if (bInitialOnly) {\n      return initialValue;\n    }\n    return (\n      goTrySync(() => JSON.parse(localStorage.getItem(key) ?? '')).data ??\n      initialValue\n    );\n  }, [initialValue, key, bInitialOnly]);\n\n  const [state, setState] = useState<T>(() => getValueFromStorage());\n\n  useEffect(() => {\n    function handleStorageChange() {\n      setState(getValueFromStorage);\n    }\n\n    window.addEventListener('storage', handleStorageChange);\n\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n    };\n  }, [getValueFromStorage]);\n\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n\n  return [state, setState];\n}\n","import { Spin, Typography } from 'antd';\nimport Layout, { Content, Header } from 'antd/lib/layout/layout';\nimport styled from 'styled-components';\nimport Aside from '../sidebar/Aside';\nimport Taskbar from '../taskboard/Taskbar';\n//import { colors } from '../shared/SharedUtSils';\nimport Taskboard from '../taskboard/Taskboard';\nimport '../styles/style.scss';\nimport AppContext from '../shared/AppContext';\nimport { Dispatch, SetStateAction, useState } from 'react';\n\nconst StyledLayout = styled(Layout)`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n`;\n\nconst StyledHeader = styled(Header)`\n  display: flex;\n  align-items: center;\n  background-color: #fff;\n`;\n\nconst StyledContent = styled(Content)`\n  background-color: #fff;\n  height: 100%;\n`;\n\ntype Context = {\n  isLoading: boolean;\n  setIsLoading: Dispatch<SetStateAction<boolean>>;\n  isLoggedIn: boolean;\n  setIsLoggedIn: Dispatch<SetStateAction<boolean>>;\n  allJobTitles: string[];\n  setAllJobTitles: Dispatch<SetStateAction<string[]>>;\n  filteredJobTitles: string[];\n  setFilteredJobTitles: Dispatch<SetStateAction<string[]>>;\n};\n\nfunction App() {\n  let [isLoading, setIsLoading] = useState(false);\n  let [isLoggedIn, setIsLoggedIn] = useState(false);\n  let [allJobTitles, setAllJobTitles] = useState([] as string[]);\n  let [filteredJobTitles, setFilteredJobTitles] = useState([] as string[]);\n\n  const userValues: Context = {\n    isLoading,\n    setIsLoading,\n    isLoggedIn,\n    setIsLoggedIn,\n    allJobTitles,\n    setAllJobTitles,\n    filteredJobTitles,\n    setFilteredJobTitles,\n  };\n  return (\n    <AppContext.Provider value={userValues}>\n      <StyledLayout>\n        <div className=\"app\">\n          <Aside></Aside>\n          <div className=\"drag-drop-container\">\n              <StyledHeader>\n                <Typography.Title level={3}>Track</Typography.Title>\n              </StyledHeader>\n              <StyledContent>\n                <Spin style={{\n                  height: '100%'\n                }} size=\"large\" spinning={userValues.isLoading}>\n                  <Taskbar />\n                  <Taskboard />\n                </Spin>\n              </StyledContent>\n            \n          </div>\n        </div>\n      </StyledLayout>\n    </AppContext.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}